"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var configure_1 = require("./configure");
describe("configure", function () {
    describe("with global querystring", function () {
        beforeEach(function () {
            delete global.window.location;
            global.window = Object.create(window);
            global.window.location = {
                port: "123",
                protocol: "http:",
                hostname: "localhost",
            };
        });
        var _a = configure_1.configure({ foo: "bar", bar: true, baz: 1 }), _b = _a.params, foo = _b.foo, bar = _b.bar, baz = _b.baz, reconfigure = _a.reconfigure, schema = _a.schema;
        describe("params", function () {
            it("returns the correct values", function () {
                expect(foo).toEqual("bar");
                expect(bar).toBe(true);
                expect(baz).toBe(1);
            });
        });
        describe("reconfigure", function () {
            it("updates the location respecting the defaults", function () {
                reconfigure({ foo: "baz" });
                expect(global.window.location.search).toEqual("?foo=baz&bar=true&baz=1");
            });
        });
        describe("schema", function () {
            it("prints the schema based on the defaults", function () {
                expect(schema).toEqual([
                    { default: "bar", param: "foo", type: "string" },
                    { default: true, param: "bar", type: "boolean" },
                    { default: 1, param: "baz", type: "number" },
                ]);
            });
        });
    });
    describe("with passed querystring", function () {
        var _a = configure_1.configure({ foo: "qux", bar: false, baz: 1 }, "?foo=baz&bar=false&baz=2"), _b = _a.params, foo = _b.foo, bar = _b.bar, baz = _b.baz, query = _a.query;
        describe("params", function () {
            it("returns the correct values", function () {
                expect(foo).toEqual("baz");
                expect(bar).toBe(false);
                expect(baz).toBe(2);
            });
        });
        describe("query", function () {
            it("returns the parsed (but un-coerced) query string", function () {
                expect(query).toEqual({ foo: "baz", bar: "false", baz: "2" });
            });
        });
    });
});
