"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var params_1 = require("./params");
describe("params", function () {
    it("works", function () {
        var exampleDefaults = {
            foo: "bar",
            bar: 1,
            baz: true,
            what: ["ok", "then"],
        };
        var parameters = params_1.params(exampleDefaults, "wow=what&bar=2&foo=2");
        expect(parameters).toEqual({
            foo: "2",
            bar: 2,
            baz: true,
            what: ["ok", "then"],
            wow: "what",
        });
    });
    it("coerces based on the defaults (number should be string)", function () {
        var exampleDefaults = { foo: "bar" };
        var foo = params_1.params(exampleDefaults, "foo=1").foo;
        expect(foo).toEqual("1");
    });
    it("coerces based on the defaults (boolean should be string)", function () {
        var exampleDefaults = { foo: "bar" };
        var foo = params_1.params(exampleDefaults, "foo=true").foo;
        expect(foo).toEqual("true");
    });
    it("parses the query string", function () {
        expect(params_1.params({}, "foo=bar")).toEqual({ foo: "bar" });
    });
    it("parses more complex query strings", function () {
        expect(params_1.params({}, "foo[]=bar&foo[]=baz&bar=foo")).toEqual({
            foo: ["bar", "baz"],
            bar: "foo",
        });
    });
    describe("with type coercion", function () {
        it("coerces the types", function () {
            expect(params_1.params({}, "size=55&color=blue&public=false")).toEqual({
                size: 55,
                color: "blue",
                public: false,
            });
        });
    });
    describe("with defaults", function () {
        it("sets defaults", function () {
            expect(params_1.params({ color: "blue", speed: 25 }, "speed=50")).toEqual({
                color: "blue",
                speed: 50,
            });
        });
    });
});
